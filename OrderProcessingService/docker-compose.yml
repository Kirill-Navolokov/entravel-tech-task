services:
  postgres:
    image: postgres:18
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example_pw
      POSTGRES_DB: OrdersDb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d OrdersDb"]
      interval: 5s
      timeout: 3s
      retries: 10
  
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: orderprocessing-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "http://+:8080"
      RabbitMQ__HostName: "amqp://guest:guest@rabbitmq:5672/"
      ConnectionStrings__OrdersDb: "Host=postgres;Port=5432;Database=OrdersDb;Username=postgres;Password=example_pw;SSL Mode=Disable"
    ports:
      - "8080:8080"

volumes:
  pgdata:
  rabbitmq_data: